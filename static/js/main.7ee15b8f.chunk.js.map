{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","Cardlist","robots","map","robot","i","components_Card","key","Math","random","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","length","components_Scroll","components_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,MAZf,SAAAC,GAAiC,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAAOC,EAAKH,EAALG,GACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAI,WACpDN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCeLS,MAnBf,SAAAX,GAA4B,IAATY,EAASZ,EAATY,OACf,OACIR,EAAAC,EAAAC,cAAA,WAEIM,EAAOC,IAAI,SAACC,EAAOC,GACf,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACAC,IAAKC,KAAKC,SAAWJ,EACrBZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAASU,EAAOG,GAAGb,YCZxB,SAASkB,EAATpB,GAAmC,IAAfqB,EAAerB,EAAfqB,aAC/B,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,WCCPI,MARf,SAAgBC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WC4CJC,cAzCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAjBzCZ,EAAKa,MAAQ,CACTlC,OAAQ,GACR+B,YAAa,IAJPV,mFAQM,IAAAc,EAAAX,KAChBY,MAAM,8CACLC,KAAK,SAAAC,GACF,OAAOA,EAASC,SAEnBF,KAAK,SAAAG,GACFL,EAAKL,SAAS,CAAE9B,OAAQwC,uCAQvB,IAAAC,EAC2BjB,KAAKU,MAA7BlC,EADHyC,EACGzC,OAAQ+B,EADXU,EACWV,YACVW,EAAiB1C,EAAO2C,OAAO,SAAAzC,GACjC,OAAOA,EAAMb,KAAKuD,cAAcC,SAASd,EAAYa,iBAEzD,OAAQ5C,EAAO8C,OAGftD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACc,EAAD,CAAWC,aAAce,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQ0C,MAN1BlD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBA7BUsD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.7ee15b8f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card({name, email, id}) {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nfunction Cardlist({robots}) {    \r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((robot, i) => {\r\n                return (\r\n                    <Card \r\n                    key={Math.random() * i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email = {robots[i].email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from \"react\";\r\n\r\nexport default function SearchBox({searchChange}) {\r\n    return (\r\n        <div>\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"search robots\" \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border: '2px solid black', height: \"500px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"../containers/App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({ robots: users})\r\n        } )\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        return !robots.length ? \r\n        <h1 className=\"tc\">Loading</h1> :\r\n        (\r\n        <div className=\"tc\">\r\n            <h1 className=\"f1\">Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <Cardlist robots={filteredRobots}/>\r\n            </Scroll>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/App\"\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}